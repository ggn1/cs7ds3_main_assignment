prob_superior_reffect_mean <- tapply(
variety_r_effect$probability,
variety_r_effect$variety,
mean
)
plot(
prob_superior_reffect_mean,
price_mean$x,
xlab = "Baseline posterior probability of wines getting rated as superior after accounting for fixed effects.",
ylab = "Observed mean price.",
col = 0
)
text(
prob_superior_reffect_mean,
price_mean$x,
levels(price_mean$Group.1),
)
# Observed probability of wines rated superior per variety (x axis)
# against mean price per variety (y axis).
prob_superior <- aggregate(
wine_reviews$superior_rating,
by = list(wine_reviews$variety_c),
FUN = function(x) mean(x == 1)
)
price_mean <- aggregate(
wine_reviews$price,
by = list(wine_reviews$variety_c),
FUN = mean
)
plot(
prob_superior$x, price_mean$x,
xlab = "Observed probability of wine being rated as superior.",
ylab = "Mean Price",
col = 0
)
text(
prob_superior$x,
price_mean$x,
prob_superior$Group.1
)
# LIBRARIES
library(hash)
library("brms")
library(gplots)
library(ggplot2)
library(colorspace)
# LOAD DATA
setwd("C:/Users/g_gna/Documents/TCD/Modules/CS7DS3_AppliedStatisticalModelling/Assignments/MainAssignment/code")
wine_reviews <- read.csv("wine_review_processed.csv")
# PREPROCESSING
### Replace long variety names with short
### codes and make the "variety" column
### have type factor.
variety_code2name <- hash(c(
"Cd"="Champagne Blend", "BR"="Bordeaux-style Red Blend",
"Re"="Rosé", "Cy"="Chardonnay", "Sh"="Syrah",
"Rd"="Red Blend", "Gy"="Gamay", "Gr"="Gewürztraminer",
"Cc"="Chenin Blanc", "Ad"="Alsace white blend",
"Tt"="Tannat", "Wd"="White Blend",
"RR"="Rhône-style Red Blend", "Mt"="Muscat",
"BW"="Bordeaux-style White Blend", "Pr"="Pinot Noir",
"Mc"="Malbec", "Mr"="Merlot", "Sc"="Sauvignon Blanc",
"Vr"="Viognier", "Ps"="Pinot Gris", "CF"="Cabernet Franc",
"Rg"="Riesling", "TC"="Tannat-Cabernet", "Me"="Marsanne",
"Pc"="Pinot Blanc", "Cn"="Cabernet Sauvignon",
"RW"="Rhône-style White Blend", "Ge"="Grenache",
"Sd"="Sparkling Blend", "MM"="Malbec-Merlot",
"Sr"="Sylvaner", "Mn"="Melon",
"CB"="Chenin Blanc-Chardonnay", "Pg"="Petit Manseng"
))
variety_name2code <- hash(c(
"Champagne Blend"="Cd", "Bordeaux-style Red Blend"="BR",
"Rosé"="Re", "Chardonnay"="Cy", "Syrah"="Sh",
"Red Blend"="Rd", "Gamay"="Gy", "Gewürztraminer"="Gr",
"Chenin Blanc"="Cc", "Alsace white blend"="Ad",
"Tannat"="Tt", "White Blend"="Wd",
"Rhône-style Red Blend"="RR", "Muscat"="Mt",
"Bordeaux-style White Blend"="BW", "Pinot Noir"="Pr",
"Malbec"="Mc", "Merlot"="Mr", "Sauvignon Blanc"="Sc",
"Viognier"="Vr", "Pinot Gris"="Ps", "Cabernet Franc"="CF",
"Riesling"="Rg", "Tannat-Cabernet"="TC", "Marsanne"="Me",
"Pinot Blanc"="Pc", "Cabernet Sauvignon"="Cn",
"Rhône-style White Blend"="RW", "Grenache"="Ge",
"Sparkling Blend"="Sd", "Malbec-Merlot"="MM",
"Sylvaner"="Sr", "Melon"="Mn",
"Chenin Blanc-Chardonnay"="CB", "Petit Manseng"="Pg"
))
variety_c <- c()
for (variety_name in wine_reviews$variety) {
codes <- variety_name2code[[variety_name]]
variety_c <- c(variety_c, codes)
}
wine_reviews$variety_c = factor(variety_c)
### Create a price bracket column containing.
### Price brackets (what price range the wine belongs to)
### were determined based on information from around 2016 from:
### https://winefolly.com/lifestyle/reality-of-wine-prices-what-you-get-for-what-you-spend/.
price_name2code = hash(c(
"Extreme Value"="EV", "Value"="V", "Popular Premium"="PP",
"Premium"="P", "Super Premium"="SP", "Ultra Premium"="UP",
"Luxury"="L", "Super Luxury"="SL", "Icon"="I"
))
price_code2name = hash(c(
"EV"="Extreme Value", "V"="Value", "PP"="Popular Premium",
"P"="Premium", "SP"="Super Premium", "UP"="Ultra Premium",
"L"="Luxury", "SL"="Super Luxury", "I"="Icon"
))
price_bracket = c()
for (price in wine_reviews$price) {
if (price < 4) {
price_bracket = c(price_bracket, "EV")
} else if (price < 10) {
price_bracket = c(price_bracket, "V")
} else if (price < 15) {
price_bracket = c(price_bracket, "PP")
} else if (price < 20) {
price_bracket = c(price_bracket, "P")
} else if (price < 30) {
price_bracket = c(price_bracket, "SP")
} else if (price < 50) {
price_bracket = c(price_bracket, "UP")
} else if (price < 100) {
price_bracket = c(price_bracket, "L")
} else if (price < 200) {
price_bracket = c(price_bracket, "SL")
} else {
price_bracket = c(price_bracket, "I")
}
}
wine_reviews$price_bracket <- factor(price_bracket)
### View response variable distribution.
tab_sup <- table(wine_reviews$superior_rating)
pie(
x=tab_sup,
main=paste(
"Proportion of Superior Wines = ",
tab_sup[2]/(tab_sup[1]+tab_sup[2])*100,
"%"
),
labels=c("not superior", "superior"),
col = c("lightgray", "lightgoldenrod1")
)
### View top 6 table entries.
wine_reviews[sample(1:length(wine_reviews), 6), ]
### View distribution of wine prices.
hist(
wine_reviews$price,
main = "Distribution of Wine Prices",
xlab = "Prices",
ylab = "Frequency",
col = "lightpink",
border = "white"
)
price_log10 = log10(wine_reviews$price)
hist(
price_log10,
main = "Distribution of Wine Prices (Log 10)",
xlab = "Prices",
ylab = "Frequency",
col = "skyblue",
border = "white"
)
wine_reviews["price_log10"] <- price_log10
tab_price_bracket = table(reorder(price_bracket, wine_reviews$price))
barplot(
tab_price_bracket,
main = "Distribution of Wines Per Price Bracket",
xlab = "Price Bracket",
ylab = "Count",
col = "slateblue",
border = "white"
)
# OBSERVATIONS:
# * No. of wines per price bracket is normally distributed.
# * Wine prices themselves are heavily skewed right and thus
#   can benefit from a log transformation before being provided
#   as input to a model.
### View proportions of wine superiority by price.
mosaicplot(
table(
reorder(wine_reviews$price_bracket, wine_reviews$price),
reorder(wine_reviews$superior_rating, wine_reviews$price)
),
col = c("lightgray", "lightgoldenrod"),
main = "Wine Superiority by Price",
xlab = "Wine Price Bracket (Increasing Order)",
ylab = "Wine Rated Superior? (1 = Yes, 0 = No)"
)
mosaicplot(
table(
reorder(wine_reviews$price_bracket, wine_reviews$price),
reorder(wine_reviews$superior_rating, wine_reviews$price)
),
col = c("lightgray", "lightgoldenrod"),
main = "Wine Superiority by Price",
xlab = "Wine Price Bracket (Increasing Order)",
ylab = "Rated Superior"
)
### Visualize the relationship between the number of wines
### of each variety and the proportion of wines rated as
### superior within each variety.
# calculate no. of wines per variety.
variety_n <- tapply(
wine_reviews$superior_rating,
wine_reviews$variety_c, length
)
# Calculate mean proportion of wines rated
# as superior per variety
variety_mean <- tapply(
wine_reviews$superior_rating,
wine_reviews$variety_c, mean
)
# Create scatter plot.
plot(
variety_mean, variety_n,
xlab = "Proportion of Wines Rated Superior",
ylab = "No. of Wines",
col = 0
)
# Add variety category short code text as markers.
text(
variety_mean, variety_n,
levels(wine_reviews$variety_c)
)
# Add a vertical dashed line to the plot at the overall
# mean proportion of wines rated as superior across all varieties.
abline(
v = mean(wine_reviews$superior_rating=="1"),
col = "red", lwd = 2, lty = 2
)
### Mean price per variety.
price_mean_sorted <- price_mean[order(price_mean$x), ]
plot(
price_mean_sorted$x,
xlab = "Variety",
ylab = "Mean Price",
type = "b",
xaxt = "n"  # Hide x-axis labels
)
axis(1, at = 1:length(price_mean_sorted$Group.1), labels = price_mean_sorted$Group.1, las = 2)
title(main = "Mean Price of Wine Varieties")
### Count per variety.
variety_count <- as.data.frame(
table(wine_reviews$variety_c)
)
variety_count_sorted <- variety_count[
order(variety_count$Freq),
]
plot(
variety_count_sorted$Freq,
xlab = "Variety",
ylab = "Frequency",
type = "b",
xaxt = "n"  # Hide x-axis labels
)
axis(
1,
at = 1:length(variety_count_sorted$Var1),
labels = variety_count_sorted$Var1,
las = 2
)
title(main = "Frequency of Wine Varieties")
### Count per variety.
variety_count <- as.data.frame(
table(wine_reviews$variety_c)
)
variety_count_sorted <- variety_count[
order(variety_count$Freq),
]
plot(
variety_count_sorted$Freq,
xlab = "Variety",
ylab = "Frequency",
type = "b",
xaxt = "n"  # Hide x-axis labels
)
axis(
1,
at = 1:length(variety_count_sorted$Var1),
labels = variety_count_sorted$Var1,
las = 2
)
title(main = "Wine Count per Variety")
# Calculate mean baseline probability under fixed population effects
# of wines of a particular variety getting rated as superior.
prob_superior_reffect_mean <- tapply(
variety_r_effect$probability,
variety_r_effect$variety,
mean
)
plot(
prob_superior_reffect_mean,
price_mean$x,
xlab = "Baseline posterior probability of wines getting rated as superior after accounting for fixed effects.",
ylab = "Observed mean price.",
col = 0
)
text(
prob_superior_reffect_mean,
price_mean$x,
levels(price_mean$Group.1),
)
### Visualize prices against baseline variety based average
### posterior probability of wine being rated as superior.
variety_freq <- table(wine_reviews$variety_c)
variety_freq_post <- table(variety_r_effect$variety)
# Observed probability of wines rated superior per variety (x axis)
# against mean price per variety (y axis).
prob_superior <- aggregate(
wine_reviews$superior_rating,
by = list(wine_reviews$variety_c),
FUN = function(x) mean(x == 1)
)
price_mean <- aggregate(
wine_reviews$price,
by = list(wine_reviews$variety_c),
FUN = mean
)
plot(
prob_superior$x, price_mean$x,
xlab = "Observed probability of wine being rated as superior.",
ylab = "Mean Price",
col = 0
)
text(
prob_superior$x,
price_mean$x,
prob_superior$Group.1
)
# Calculate mean baseline probability under fixed population effects
# of wines of a particular variety getting rated as superior.
prob_superior_reffect_mean <- tapply(
variety_r_effect$probability,
variety_r_effect$variety,
mean
)
plot(
prob_superior_reffect_mean,
price_mean$x,
xlab = "Baseline posterior probability of wines getting rated as superior after accounting for fixed effects.",
ylab = "Observed mean price.",
col = 0
)
text(
prob_superior_reffect_mean,
price_mean$x,
levels(price_mean$Group.1),
)
# INTERPRET MODEL OVERALL
prior_summary(fit)
summary(fit)
# INVESTIGATING FIXED EFFECTS
plot(fit, variable =c("b_Intercept", "b_price_log10", "b_Rich"))
plot(fit, variable =c("b_tannin", "b_alcohol", "b_tfidf_tsne_1_norm:tfidf_tsne_2_norm"))
# INVESTIGATING RANOM EFFECTS
fit_mat <- brms::as_draws_matrix(fit)
sample <- as.numeric(fit_mat[, 11:45])
variety_r_effect <- data.frame(
sample = sample,
variety = rep(unique(wine_reviews$variety_c), each = 4000),
probability = exp(sample) / (1 + exp(sample))
)
ggplot(variety_r_effect) + geom_boxplot(aes(
reorder(variety, probability, median), probability,
fill = reorder(variety, probability, median),
), show.legend=FALSE) + geom_hline(
aes(yintercept=0.5), linetype = "dashed",
color = "red", linewidth=1
) + labs(
title = "Wine Variety Level Random Intercept Samples",
x = "Variety",
y = "Probability of wine being rated superior after accounting for fixed effects."
)
### Visualize prices against baseline variety based average
### posterior probability of wine being rated as superior.
variety_freq <- table(wine_reviews$variety_c)
variety_freq_post <- table(variety_r_effect$variety)
# Observed probability of wines rated superior per variety (x axis)
# against mean price per variety (y axis).
prob_superior <- aggregate(
wine_reviews$superior_rating,
by = list(wine_reviews$variety_c),
FUN = function(x) mean(x == 1)
)
price_mean <- aggregate(
wine_reviews$price,
by = list(wine_reviews$variety_c),
FUN = mean
)
plot(
prob_superior$x, price_mean$x,
xlab = "Observed probability of wine being rated as superior.",
ylab = "Mean Price",
col = 0
)
text(
prob_superior$x,
price_mean$x,
prob_superior$Group.1
)
# Calculate mean baseline probability under fixed population effects
# of wines of a particular variety getting rated as superior.
prob_superior_reffect_mean <- tapply(
variety_r_effect$probability,
variety_r_effect$variety,
mean
)
plot(
prob_superior_reffect_mean,
price_mean$x,
xlab = "Baseline posterior probability of wines getting rated as superior after accounting for fixed effects.",
ylab = "Observed mean price.",
col = 0
)
text(
prob_superior_reffect_mean,
price_mean$x,
levels(price_mean$Group.1),
)
plot(
prob_superior_reffect_mean,
price_mean$x,
xlab = "Baseline posterior probability of wines getting rated as superior after accounting for fixed effects.",
ylab = "Observed mean price.",
col = 0
)
text(
prob_superior_reffect_mean,
price_mean$x,
levels(price_mean$Group.1),
)
# Observed probability of wines rated superior per variety (x axis)
# against mean price per variety (y axis).
prob_superior <- aggregate(
wine_reviews$superior_rating,
by = list(wine_reviews$variety_c),
FUN = function(x) mean(x == 1)
)
price_mean <- aggregate(
wine_reviews$price,
by = list(wine_reviews$variety_c),
FUN = mean
)
plot(
prob_superior$x, price_mean$x,
xlab = "Observed probability of wine being rated as superior.",
ylab = "Mean Price",
col = 0
)
text(
prob_superior$x,
price_mean$x,
prob_superior$Group.1
)
# Calculate mean baseline probability under fixed population effects
# of wines of a particular variety getting rated as superior.
prob_superior_reffect_mean <- tapply(
variety_r_effect$probability,
variety_r_effect$variety,
mean
)
# Calculate mean baseline probability under fixed population effects
# of wines of a particular variety getting rated as superior.
prob_superior_reffect_mean <- tapply(
variety_r_effect$probability,
variety_r_effect$variety,
mean
)
plot(
prob_superior_reffect_mean,
price_mean$x,
xlab = "Baseline posterior probability of wines getting rated as superior after accounting for fixed effects.",
ylab = "Observed mean price.",
col = 0
)
text(
prob_superior_reffect_mean,
price_mean$x,
levels(price_mean$Group.1),
)
### Mean price per variety.
price_mean_sorted <- price_mean[order(price_mean$x), ]
plot(
price_mean_sorted$x,
xlab = "Variety",
ylab = "Mean Price",
type = "b",
xaxt = "n"  # Hide x-axis labels
)
axis(1, at = 1:length(price_mean_sorted$Group.1), labels = price_mean_sorted$Group.1, las = 2)
title(main = "Mean Price of Wine Varieties")
### Count per variety.
variety_count <- as.data.frame(
table(wine_reviews$variety_c)
)
variety_count_sorted <- variety_count[
order(variety_count$Freq),
]
plot(
variety_count_sorted$Freq,
xlab = "Variety",
ylab = "Frequency",
type = "b",
xaxt = "n"  # Hide x-axis labels
)
axis(
1,
at = 1:length(variety_count_sorted$Var1),
labels = variety_count_sorted$Var1,
las = 2
)
title(main = "Wine Count per Variety")
