sentiment_rounded = round(wine_reviews[, "sentiment"], 1)
mosaicplot(
table(
reorder(sentiment_rounded, sentiment_rounded),
reorder(wine_reviews$superior_rating, sentiment_rounded)
),
col = c("lightgray", "lightgoldenrod"),
main = NULL,
xlab = "Sentiment",
ylab = "Superior",
)
### CORRELATIONS
### Visualize correlations between potential predictor variables
### and response variable as well as each other.
correlation_matrix <- cor(wine_reviews[,c(
"superior_rating", "price_log10", "Finish", "Rich", "Soft", "Ready",
"sweetness", "acidity", "tannin", "alcohol", "body",
"tfidf_tsne_1", "tfidf_tsne_2"
)])
heatmap.2(
correlation_matrix,
col = colorRampPalette(c("blue", "white", "red"))(100),  # Define color palette
symm = FALSE,  # Do not show symmetric scale
margins = c(10, 10),  # Add margins for row and column names
scale = "none",  # Do not scale data
main = "Correlation Matrix",  # Title of the plot
cex.main = 1.2,  # Font size of the title
key = TRUE,  # Show color key (legend)
keysize = 1.5,  # Size of the color key
key.title = NA,  # Do not show color key title
trace = "none",  # Do not show trace lines
revC = TRUE,  # Reverse color scale
dendrogram = "none" # Do not calculate dendrograms
)
prior_summary(fit)
summary(fit)
plot(fit, variable =c(
"b_Intercept", "b_price_log10", "b_price_log10:tfidf_tsne_1_norm",
"b_price_log10:body"
))
plot(fit, variable =c("b_Rich", "b_tannin", "b_alcohol"))
# INVESTIGATING RANOM EFFECTS
fit_mat <- brms::as_draws_matrix(fit)
sample <- as.numeric(fit_mat[, 11:45])
variety_r_effect <- data.frame(
sample = sample,
variety = rep(unique(wine_reviews$variety_c), each = 4000),
probability = exp(sample) / (1 + exp(sample))
)
ggplot(variety_r_effect) + geom_boxplot(aes(
reorder(variety, probability, median), probability,
fill = reorder(variety, probability, median),
), show.legend=FALSE) + geom_hline(
aes(yintercept=0.5), linetype = "dashed",
color = "red", linewidth=1
) + labs(
title = "Wine Variety Level Random Intercept Samples",
x = "Variety",
y = "Probability of wine being rated superior after accounting for fixed effects."
)
### Visualize prices against baseline variety based average
### posterior probability of wine being rated as superior.
variety_freq <- table(wine_reviews$variety_c)
variety_freq_post <- table(variety_r_effect$variety)
# Observed probability of wines rated superior per variety (x axis)
# against mean price per variety (y axis).
prob_superior <- aggregate(
wine_reviews$superior_rating,
by = list(wine_reviews$variety_c),
FUN = function(x) mean(x == 1)
)
price_mean <- aggregate(
wine_reviews$price,
by = list(wine_reviews$variety_c),
FUN = mean
)
plot(
prob_superior$x, price_mean$x,
xlab = "Observed probability of wine being rated as superior.",
ylab = "Mean Price",
col = 0
)
text(
prob_superior$x,
price_mean$x,
prob_superior$Group.1
)
# Calculate mean baseline probability under fixed population effects
# of wines of a particular variety getting rated as superior.
prob_superior_reffect_mean <- tapply(
variety_r_effect$probability,
variety_r_effect$variety,
mean
)
plot(
prob_superior_reffect_mean,
price_mean$x,
xlab = "Baseline posterior probability of wines getting rated as superior after accounting for fixed effects.",
ylab = "Observed mean price.",
col = 0
)
text(
prob_superior_reffect_mean,
price_mean$x,
levels(price_mean$Group.1),
)
# Calculate mean baseline probability under fixed population effects
# of wines of a particular variety getting rated as superior.
prob_superior_reffect_mean <- tapply(
variety_r_effect$probability,
variety_r_effect$variety,
mean
)
plot(
prob_superior_reffect_mean,
price_mean$x,
xlab = "Baseline posterior probability of wines getting rated as superior after accounting for fixed effects.",
ylab = "Observed mean price.",
col = 0
)
text(
prob_superior_reffect_mean,
price_mean$x,
levels(price_mean$Group.1)
)
prob_superior_reffect_mean
price_mean
prob_superior_reffect_mean <- tapply(
variety_r_effect$probability,
variety_r_effect$variety,
mean
)
plot(
prob_superior_reffect_mean,
price_mean$x,
xlab = "Baseline posterior probability of wines getting rated as superior after accounting for fixed effects.",
ylab = "Observed mean price.",
col = 0
)
text(
prob_superior_reffect_mean,
price_mean$x,
names(prob_superior_reffect_mean)
)
prob_superior <- aggregate(
wine_reviews$superior_rating,
by = list(wine_reviews$variety_c),
FUN = function(x) mean(x == 1)
)
price_mean <- aggregate(
wine_reviews$price,
by = list(wine_reviews$variety_c),
FUN = mean
)
plot(
prob_superior$x, price_mean$x,
xlab = "Observed probability of wine being rated as superior.",
ylab = "Observed mean price.",
col = 0
)
text(
prob_superior$x,
price_mean$x,
prob_superior$Group.1
)
# Calculate mean baseline probability under fixed population effects
# of wines of a particular variety getting rated as superior.
prob_superior_reffect_mean <- tapply(
variety_r_effect$probability,
variety_r_effect$variety,
mean
)
plot(
prob_superior_reffect_mean,
price_mean$x,
xlab = "Baseline posterior probability of wines getting rated as superior after accounting for fixed effects.",
ylab = "Observed mean price.",
col = 0
)
text(
prob_superior_reffect_mean,
price_mean$x,
names(prob_superior_reffect_mean)
)
# LIBRARIES
library(gplots)
library(ggplot2)
library(colorspace)
# LOAD DATA
setwd("C:/Users/g_gna/Documents/TCD/Modules/CS7DS3_AppliedStatisticalModelling/Assignments/MainAssignment/code")
wine_reviews <- read.csv("wine_review_processed.csv")
### RESPONSE VARIABLE DISTRIBUTION
tab_sup <- table(wine_reviews$superior_rating)
pie(
x=tab_sup,
main=paste(
"Proportion of Superior Wines = ",
tab_sup[2]/(tab_sup[1]+tab_sup[2])*100,
"%"
),
labels=c("not superior", "superior"),
col = c("lightgray", "lightgoldenrod1")
)
# OBSERVATIONS:
# * Portion of wines ranked superior in this data set is close
#   to half at around 40%. Hence, this data set is fairly
#   balanced w.r.t superior and non-superior wines.
### TOP 6
wine_reviews[sample(1:length(wine_reviews), 6), ]
### WINE PRICES
### Skewed distribution.
hist(
wine_reviews$price,
main = "Distribution of Wine Prices",
xlab = "Prices",
ylab = "Frequency",
col = "lightpink",
border = "white"
)
### Adjusted for skewness.
price_log10 = log10(wine_reviews$price)
hist(
price_log10,
main = "Distribution of Wine Prices (Log 10)",
xlab = "Prices",
ylab = "Frequency",
col = "skyblue",
border = "white"
)
wine_reviews["price_log10"] <- price_log10
### COUNTS + PROPORTIONS
### Wine count per price bracket.
price_bracket_count = table(reorder(price_bracket, wine_reviews$price))
# LIBRARIES
library(gplots)
library(ggplot2)
library(colorspace)
# LOAD DATA
setwd("C:/Users/g_gna/Documents/TCD/Modules/CS7DS3_AppliedStatisticalModelling/Assignments/MainAssignment/code")
wine_reviews <- read.csv("wine_review_processed.csv")
### RESPONSE VARIABLE DISTRIBUTION
tab_sup <- table(wine_reviews$superior_rating)
pie(
x=tab_sup,
main=paste(
"Proportion of Superior Wines = ",
tab_sup[2]/(tab_sup[1]+tab_sup[2])*100,
"%"
),
labels=c("not superior", "superior"),
col = c("lightgray", "lightgoldenrod1")
)
# OBSERVATIONS:
### Wine count v/s proportion rated superior per variety.
variety_count <- tapply(
wine_reviews$superior_rating,
wine_reviews$variety_c, length
)
variety_proportion_superior <- tapply(
wine_reviews$superior_rating,
wine_reviews$variety_c, mean
)
plot(
variety_proportion_superior, variety_count,
xlab = "Proportion of Wines Rated Superior",
ylab = "No. of Wines",
col = 0
)
text(
variety_proportion_superior, variety_count,
names(variety_proportion_superior)
)
abline(
v = mean(wine_reviews$superior_rating=="1"),
col = "red", lwd = 2, lty = 2
)
### Mean price and count per variety.
price_mean_sorted <- price_mean[order(price_mean$x), ]
plot(
price_mean_sorted$x,
xlab = "Variety",
ylab = "Mean Price",
type = "b",
xaxt = "n"  # Hide x-axis labels
)
axis(
1, at = 1:length(price_mean_sorted$Group.1),
labels = price_mean_sorted$Group.1, las = 2
)
title(main = "Mean Price of Wine Varieties")
variety_count <- as.data.frame(
table(wine_reviews$variety_c)
)
variety_count_sorted <- variety_count[
order(variety_count$Freq),
]
plot(
variety_count_sorted$Freq,
xlab = "Variety",
ylab = "Frequency",
type = "b",
xaxt = "n"  # Hide x-axis labels
)
axis(
1,
at = 1:length(variety_count_sorted$Var1),
labels = variety_count_sorted$Var1,
las = 2
)
title(main = "Wine Count per Variety")
price_mean_sorted <- price_mean[order(price_mean$x), ]
plot(
price_mean_sorted$x,
xlab = "Variety",
ylab = "Mean Price",
type = "b",
col='darkgreen',
xaxt = "n"  # Hide x-axis labels
)
axis(
1, at = 1:length(price_mean_sorted$Group.1),
labels = price_mean_sorted$Group.1, las = 2
)
title(main = "Mean Price of Wine Varieties")
variety_count <- as.data.frame(
table(wine_reviews$variety_c)
)
variety_count_sorted <- variety_count[
order(variety_count$Freq),
]
plot(
variety_count_sorted$Freq,
xlab = "Variety",
ylab = "Frequency",
type = "b",
col = 'lightblue',
xaxt = "n"  # Hide x-axis labels
)
axis(
1,
at = 1:length(variety_count_sorted$Var1),
labels = variety_count_sorted$Var1,
las = 2
)
title(main = "Wine Count per Variety")
variety_count <- as.data.frame(
table(wine_reviews$variety_c)
)
variety_count_sorted <- variety_count[
order(variety_count$Freq),
]
plot(
variety_count_sorted$Freq,
xlab = "Variety",
ylab = "Frequency",
type = "b",
col = 'blue',
xaxt = "n"  # Hide x-axis labels
)
axis(
1,
at = 1:length(variety_count_sorted$Var1),
labels = variety_count_sorted$Var1,
las = 2
)
title(main = "Wine Count per Variety")
variety_r_effect
mat1 <- matrix(unlist
(tapply(variety_r_effect$sample, variety_r_effect$variety, quantile, prob = c(0.2, 0.5, 0.8))),
nrow = 3, ncol = 47,
dimnames = list( c("0.2", "0.5", "0.8"), levels(as.factor(wine_reviews$variety)))
)
mat1 <- matrix(unlist
(tapply(variety_r_effect$sample, variety_r_effect$variety, quantile, prob = c(0.2, 0.5, 0.8))),
nrow = 3, ncol = 35,
dimnames = list( c("0.2", "0.5", "0.8"), levels(as.factor(wine_reviews$variety)))
)
mat1
mat1 <- mat1[, order(mat1[2, ])]
round(exp(mat1[, which(mat1[3, ] < 0)]), 2)
neg_eff <- matrix(unlist
(tapply(variety_r_effect$sample, variety_r_effect$variety, quantile, prob = c(0.2, 0.5, 0.8))),
nrow = 3, ncol = 35,
dimnames = list( c("0.2", "0.5", "0.8"), levels(as.factor(wine_reviews$variety)))
)
neg_eff <- neg_eff[, order(neg_eff[2, ])]
round(exp(neg_eff[, which(neg_eff[3, ] < 0)]), 2)
# Focus on varieties with high negative effects (0.975 quantile < 0)
# such that even at the 97.5th percentile of the distribution,
# there's still a chance of a negative effect for these varieties.
neg_eff <- matrix(unlist
(tapply(variety_r_effect$sample, variety_r_effect$variety, quantile, prob = c(0.25, 0.5, 0.975))),
nrow = 3, ncol = 35,
dimnames = list( c("0.25", "0.5", "0.975"), levels(as.factor(wine_reviews$variety)))
)
neg_eff <- neg_eff[, order(neg_eff[2, ])]
round(exp(neg_eff[, which(neg_eff[3, ] < 0)]), 2)
# Focus on varieties with high positive effects (0.25 quantile > 0)
# such that even at the 2.5th percentile of the distribution,
# there's still a chance of a positive effect for these varieties.
pos_eff <- matrix(unlist
(tapply(variety_r_effect$sample, variety_r_effect$variety, quantile, prob = c(0.25, 0.5, 0.975))),
nrow = 3, ncol = 35,
dimnames = list( c("0.25", "0.5", "0.975"), levels(as.factor(wine_reviews$variety)))
)
pos_eff <- pos_eff[, order(pos_eff[2, ])]
round(exp(pos_eff[, which(pos_eff[3, ] > 0)]), 2)
mat_quantiles <- matrix(unlist
(tapply(variety_r_effect$sample, variety_r_effect$variety, quantile, prob = c(0.25, 0.5, 0.975))),
nrow = 3, ncol = 35,
dimnames = list( c("0.25", "0.5", "0.975"), levels(as.factor(wine_reviews$variety)))
)
mat_quantiles <- mat_quantiles[, order(mat_quantiles[2, ])]
neg_eff <- round(exp(mat_quantiles[, which(mat_quantiles[3, ] < 0)]), 2)
neg_eff
pos_eff <- round(exp(mat_quantiles[, which(mat_quantiles[1, ] > 0)]), 2)
pos_eff
mat1
test_data <- read.csv("test_data_processed.csv")
test_data$tfidf_tsne_1_norm <- min_max_normalize(test_data$tfidf_tsne_1)
test_data$price_norm <- min_max_normalize(test_data$price)
# Fit data.
input_data <- wine_reviews[, c(
"price_log10", "tannin", "alcohol", "body",
"Rich", "variety", "tfidf_tsne_1_norm")]
wine_reviews
input_data <- wine_reviews[, c(
"price_log10", "tannin", "alcohol", "body",
"Rich", "variety", "tfidf_tsne_1_norm")]
# LOAD DATA
setwd("C:/Users/g_gna/Documents/TCD/Modules/CS7DS3_AppliedStatisticalModelling/Assignments/MainAssignment/code")
wine_reviews <- read.csv("wine_review_processed.csv")
wine_reviews$price_log10 <- log10(wine_reviews$price)
min_max_normalize <- function(x) {(x-min(x))/(max(x)-min(x))}
wine_reviews$tfidf_tsne_1_norm <- min_max_normalize(wine_reviews$tfidf_tsne_1)
wine_reviews$tfidf_tsne_2_norm <- min_max_normalize(wine_reviews$tfidf_tsne_2)
wine_reviews$price_norm <- min_max_normalize(wine_reviews$price)
test_data <- read.csv("test_data_processed.csv")
test_data$tfidf_tsne_1_norm <- min_max_normalize(test_data$tfidf_tsne_1)
test_data$price_norm <- min_max_normalize(test_data$price)
input_data <- wine_reviews[, c(
"price_log10", "tannin", "alcohol", "body",
"Rich", "variety", "tfidf_tsne_1_norm")]
input_data <- wine_reviews[, c(
"price_log10", "tannin", "alcohol", "body",
"Rich", "variety", "tfidf_tsne_1_norm")]
pp <- predict(fit, newdata = input_data)
boxplot(
pp[ ,1] ~ wine_reviews$superior_rating,
ylab = "Predicted probability"
)
classification_threshold = 0.5
cm <- table(
pp[ ,1] > classification_threshold,
wine_reviews$superior_rating
)
metrics <- compute_metrics(cm)
input_data <- wine_reviews[, c(
"price_log10", "tannin", "alcohol", "body",
"Rich", "variety", "tfidf_tsne_1_norm")]
pp <- predict(fit, newdata = input_data)
boxplot(
pp[ ,1] ~ wine_reviews$superior_rating,
ylab = "Predicted probability"
)
classification_threshold = 0.5
cm <- table(
pp[ ,1] > classification_threshold,
wine_reviews$superior_rating
)
metrics <- compute_metrics(cm)
metrics
data_fit <- wine_reviews[, c(
"price_log10", "tannin", "alcohol", "body",
"Rich", "variety", "tfidf_tsne_1_norm")]
pp_fit <- predict(fit, newdata = data_fit)
boxplot(
pp_fit[ ,1] ~ wine_reviews$superior_rating,
ylab = "Predicted probability"
)
classification_threshold = 0.5
cm_fit <- table(
pp_fit[ ,1] > classification_threshold,
wine_reviews$superior_rating
)
metrics_fit <- compute_metrics(cm_fit)
# $accuracy
# [1] 0.8148
#
# $f1_score
# [1] 0.7457441
data_test <- test_data[, c(
"price_log10", "tannin", "alcohol", "body",
"Rich", "variety", "tfidf_tsne_1_norm")]
test_data
test_data <- read.csv("test_data_processed.csv")
test_data$tfidf_tsne_1_norm <- min_max_normalize(test_data$tfidf_tsne_1)
test_data$price_log10 <- log10(test_data$price)
data_test <- test_data[, c(
"price_log10", "tannin", "alcohol", "body",
"Rich", "variety", "tfidf_tsne_1_norm")]
pp_test <- predict(fit, newdata = data_test)
boxplot(
pp_test[ ,1] ~ test_data$superior_rating,
ylab = "Predicted probability"
)
cm_test <- table(
pp_test[ ,1] > classification_threshold,
test_data$superior_rating
)
metrics_fit <- compute_metrics(cm_test)
metrics_fit
